openapi: 3.0.0
info:
  description: This is a project for IT4409
  version: "1.0.0"
  title: IT4409
servers:
  - url: http://localhost:8080/v1 

paths:
  /auth/oauth/google:
    get: 
      summary: get secret code from google
      operationId: OauthGoogle
      parameters:
        - name: code
          in: query
          schema:
            type: string
          required: true
      responses:
        201:
          description: Create token successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDetails' 
        401:
          description: Operation without permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        502:
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
    
  /auth/refresh:
    post:
      summary: Refresh token
      operationId: Refresh
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  description: Coresponding refesh token
      responses:
        201:
          description: Refesh token successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDetails' 
        400:
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
  
  /auth/logout:
    get:
      summary: Log out 
      operationId: Logout 
      security:
        - bearerAuth: []
      responses:
        200: 
          description: Log out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        401:
          description: Operation without permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 

  /blog/:
    get:
      summary: Get all or some blogs 
      operationId: GetBlogs
      parameters:
        - name: from
          in: query
          schema: 
            type: integer
            format: int32
            default: 0
          required: false
        - name: size
          in: query
          schema: 
            type: integer
            format: int32
            default: 10
          required: false
        - name: category
          in: query
          schema: 
            type: string
            enum:
              - all
              - art 
              - science
              - technology
              - cinema
              - design
              - food 
        - name: sort
          in: query
          schema:
            type: string
          required: false
      responses:
        200:
          description: Get blogs successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBlogsResponse' 
        400:
          description: Bad request from user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
    post:
      summary: Add a new blog 
      operationId: createBlog
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateBlogRequest'
        required: true
      responses:
        201:
          description: Adding blog successfully
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Blog'
        400:
          description: Bad request from user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        401:
          description: Operation without permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 

  /blog/{id}:
    get:
      summary: Get a specific blog
      operationId: getBlog
      parameters:
        - name: id
          in: path
          description: blog's id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Get a blog successfully
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/GetBlogResponse'
        404:
          description: Blog is not existed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        
    put:
      summary: Edit a blog
      operationId: updateBlog
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: blog's id 
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/UpdateBlogRequest'
        required: true
      responses:
        200:
          description: Editing blog successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: Bad request from user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        401:
          description: Operation without permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        404:
          description: Blog is not existed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 

  /comment/:
    get:
      summary: Get comments of a blog
      parameters:
        - in: query
          name: blog_id
          required: false
          schema: 
            type: string
      responses:
        200:
          description: Get comments successfully
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/GetCommentsResponse'
        404:
          description: Blog has not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'  

    post:
      summary: Add a comment
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateCommentRequest'
        required: true
      responses:
        201:
          description: Adding comment successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentResponse'
        400:
          description: Bad request from user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        401:
          description: Operation without permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
  
  /comment/{id}:
    get:
      summary: Get a comment
      parameters:
        - name: id
          in: path
          description: comment's id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Get a comment successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentResponse'
        401:
          description: Operation without permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        404:
          description: Comment is not existed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
    put:
      summary: Edit a comment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: comment's id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/UpdateCommentRequest'
        required: true
      responses:
        200:
          description: Editing comment successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: Bad request from user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        401:
          description: Operation without permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        404:
          description: Comment is not existed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
    
    delete:
      summary: Delete a comment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: comment's id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Editing comment successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        401:
          description: Operation without permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        404:
          description: Comment is not existed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    GetBlogsResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          description: Http code response
        result:
          type: array
          items: 
            $ref: '#/components/schemas/Blog'
        info_message:
          type: array
          items:
            type: string
    
    GetBlogResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          description: Http code response
        result:
          type: object
          properties:
            blog:
              $ref: '#/components/schemas/Blog'
            comments:
              type: array
              items:
                $ref: '#/components/schemas/Comment'
        info_message:
          type: array
          items:
            type: string

    GetCommentResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          description: Http code response
        result:
          $ref: '#/components/schemas/Comment'
        info_message:
          type: array
          items:
            type: string

    GetCommentsResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          description: Http code response
        result:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        info_message:
          type: array
          items:
            type: string

    SuccessResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          description: Http code response
        result:
          type: object
          description: returning result
        info_message:
          type: array
          items:
            type: string
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          description: Http code response
        error_message:
          type: string
          description: Description about error
        info_message:
          type: array
          items:
            type: string
    Blog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        picture:
          type: string # Define later
        content:
          type: string
        category:
          type: string
          enum:
            - art 
            - science
            - technology
            - cinema
            - design
            - food
        user_id:
          type: string
          format: uuid
          description: blog's owner
        time_created:
          type: string
          format: date-time
        last_updated:
          type: string
          format: date-time
    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        blog_id:
          type: string
          format: uuid
          description: blog that comment belongs to 
        user_id:
          type: string
          format: uuid
          description: comment's owner
        parent_id:
          type: string
          format: uuid
        content:
          type: string
        time_created:
          type: string
          format: date-time
        last_updated:
          type: string
          format: date-time
    TokenDetails:
      type: object
      properties:
        access_token:
          type: string
        access_uuid:
          type: string
          format: uuid
        refresh_token:
          type: string
        refresh_uuid:
          type: string
          format: uuid
        at_expires:
          type: integer
          format: int64
        rt_expires:
          type: integer
          format: int64
  requestBodies:
    CreateBlogRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              title: 
                type: string
              content:
                type: string
              category:
                type: string
                enum:
                  - art 
                  - science
                  - technology
                  - cinema
                  - design
                  - food 
              picture:
                type: string
    UpdateBlogRequest:
      content:
        application/json:
          schema: 
            type: object
            properties:
              title: 
                type: string
              content:
                type: string
              category:
                type: string
                enum:
                  - art 
                  - science
                  - technology
                  - cinema
                  - design
                  - food 
              picture:
                type: string
    CreateCommentRequest:
      content:
        application/json:
          schema: 
            type: object
            properties:
              blog_id:
                type: string
                format: uuid
              parent_id:
                type: string
                format: uuid
              content:
                type: string      

    UpdateCommentRequest:
      content:
        application/json:
          schema: 
            type: object
            properties:
              content:
                type: string

    Blog:
      content:
        application/json:
          schema:
            type: object
            properties:
              content:
                type: string
                
    Comment:
      content:
        application/json:
          schema:
            type: object
            properties:
              content:
                type: string
              blog_id:
                type: string
                format: uuid
              parent_id:
                type: string
                format: uuid
                default: null
              



  